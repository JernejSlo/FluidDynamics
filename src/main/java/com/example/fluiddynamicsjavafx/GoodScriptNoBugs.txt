package com.example.fluiddynamicsjavafx;

import javafx.animation.AnimationTimer;
import javafx.application.Application;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.layout.Pane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Circle;
import javafx.stage.Stage;

import java.io.IOException;
import java.util.*;


public class Fluid2D extends Application {

    int SCREEN_WIDTH = 360;
    int SCREEN_HEIGHT = 720;
    int dam = 0;
    boolean simulateDamBreak = true;


    public static KdTree tree;
    public static int NUM_PARTICLES = 1000;
    ArrayList<KdTree.Node> [] neighbors = new ArrayList[NUM_PARTICLES];
    public static int PARTICLE_RADIUS = 3;
    private List<ParticleDrawn> particles = new ArrayList<>();

    public static double [][] positions = new double[NUM_PARTICLES][2];
    public static double [] densities = new double[NUM_PARTICLES];

    public static List<KdTree.Node> particleCoordinates = new ArrayList<>();

    double smoothingLength = 2.5*PARTICLE_RADIUS;



    double mass = 1;
    double [] zeros;
    double timeStep = 0.01;

    public static double ISOTROPIC_EXPONENT = 20;
    public static double BASE_DENSITY = 1;
    public static double [] CONSTANT_FORCE = {0,-0.1};
    public static double DYNAMIC_VISCOSITY = 0.5;
    public static double DAMPING_COEFFICIENT = - 0.9;

    public double NORMALIZATION_DENSITY = (315 * mass) / (64 * Math.PI * Math.pow((smoothingLength),9));
    public double NORMALIZATION_VISCOUS_FORCE = (45 * DYNAMIC_VISCOSITY * mass) / (Math.PI * (Math.pow((smoothingLength),6)));
    public double NORMALIZATION_PRESSURE_FORCE = -((45 * mass) / (Math.PI * Math.pow((smoothingLength),6)));

    // Define the time step for the simulation
    double dt = 0.001;

    private static final int MIN_X = 0;
    private static final int MIN_Y = 0;
    private double MAX_X = SCREEN_WIDTH;
    private double MAX_Y = SCREEN_HEIGHT;

    // The gravitational force acting on the vectors
    private static final double GRAVITY = 9.8;

    // The coefficient of restitution for the vectors
    private static final double COR = 0.7;

    @Override
    public void start(Stage stage) throws IOException {
        Scene scene = new Scene(createContent());

        stage.setTitle("Fluid Dynamics");



        stage.setScene(scene);
        stage.show();


    }

    private Parent createContent(){


        zeros = new double[2];
        zeros[0] = 0;
        zeros[1] = 0;

        Pane root = new Pane();
        root.setPrefSize(SCREEN_WIDTH,SCREEN_HEIGHT);
        root.setStyle("-fx-background-color: black;");


        for (int i = 0; i < NUM_PARTICLES; i++) {
            var p = new ParticleDrawn();
            particles.add(p);
            root.getChildren().add(p);
        }


        double x = 0;
        double y = 0;
        if (simulateDamBreak){
            for (int i = 0; i < NUM_PARTICLES; i++) {
                ParticleDrawn particle = particles.get(i);
                double num = smoothingLength;

                particle.setTranslateX(x);
                particle.setTranslateY(y);
                positions[i][0] = x; //+Math.random()*1;
                positions[i][1] = y;

                if (x >= (MAX_X)/2){
                    x = 0;
                    y += num;
                }

                x+= num/2;

            }}
        else {
            x = MAX_X/4;
            y = MAX_Y/2;
            for (int i = 0; i < NUM_PARTICLES; i++) {
                ParticleDrawn particle = particles.get(i);
                double num = smoothingLength;

                particle.setTranslateX(x);
                particle.setTranslateY(y);
                positions[i][0] = x; //+Math.random()*1;
                positions[i][1] = y;

                if (x >= (3*MAX_X)/4){
                    x = MAX_X/4;
                    y += num;
                }

                x+= num/2;

            }
        }

        for (int i = 0; i < positions.length; i++) {
            KdTree.Node newNode = new KdTree.Node(new double[] {positions[i][0],positions[i][1]});
            double [] velocity = {0.1,0};

            newNode.setVelocity(velocity);
            newNode.setDensity(BASE_DENSITY);
            newNode.id = i;
            particleCoordinates.add(newNode);

        }

        tree = new KdTree(2,particleCoordinates);
        tree.setRadius(smoothingLength);



        AnimationTimer timer = new AnimationTimer() {
            @Override
            public void handle(long now) {
                onUpdate();

            }
        };
        timer.start();

        return root;
    }

    private static class ParticleDrawn extends Parent {
        Circle shape;
        ParticleDrawn(){
            shape = new Circle(PARTICLE_RADIUS*2);
            shape.setFill(Color.LIGHTSKYBLUE);

            getChildren().addAll(shape);
        }
        public void setColor(Color color){
            shape.setFill(color);
        }
    }



    public void calculateDensity(KdTree.Node currParticle){
        ArrayList collisions = neighbors[currParticle.id];
        double [] pl = currParticle.getCoords_();
        double density = NORMALIZATION_DENSITY * Math.pow((Math.pow(smoothingLength,2)-Math.pow(0,2)),3);
        for (int i = 0; i < collisions.size(); i++) {
            KdTree.Node neighbour = (KdTree.Node) collisions.get(i);
            double [] c = neighbour.getCoords_();
            double distance = getDistance(pl[0],pl[1],c[0],c[1]);

            density+=NORMALIZATION_DENSITY * Math.pow((Math.pow(smoothingLength,2)-Math.pow(distance,2)),3);

        }
        currParticle.setDensity(density);
    }

    public void calculatePressure(KdTree.Node currParticle){
        double pressure = ISOTROPIC_EXPONENT * (currParticle.getDensity() -BASE_DENSITY);
        currParticle.setPressure(pressure);
    }

    public double[] normalize(double[] vector){
        double magnitude = Math.sqrt(vector[0]*vector[0] + vector[1]*vector[1]);
        double[] normalizedVector = {vector[0]/magnitude, vector[1]/magnitude};



        return normalizedVector;
    }
    public double [] sub(double [] vector,double[] subtract){
        double [] subbedVector = new double[2];

        subbedVector[0] = vector[0]-subtract[0];
        subbedVector[1] = vector[1]-subtract[1];

        return subbedVector;
    }
    public double [] add(double [] vector,double[] add){
        double [] addedVector = new double[2];

        addedVector[0] = vector[0]+add[0];
        addedVector[1] = vector[1]+add[1];

        return addedVector;
    }
    public double [] mul(double [] vector1,double scalar){
        double [] mulVector = new double[2];

        mulVector[0] = vector1[0]*scalar;
        mulVector[1] = vector1[1]*scalar;

        return mulVector;
    }
    public double [] vecmul(double [] vector1,double [] vector2){
        double [] mulVector = new double[2];

        mulVector[0] = vector1[0]*vector2[0];
        mulVector[1] = vector1[1]*vector2[1];

        return mulVector;
    }
    public double [] pow(double [] vector1,double pow){
        double [] mulVector = new double[2];

        mulVector[0] = Math.pow(vector1[0],pow);
        mulVector[1] = Math.pow(vector1[1],pow);

        return mulVector;
    }
    public double [] div(double [] vector1,double scalar){
        double [] divVector = new double[2];

        divVector[0] = vector1[0]/scalar;
        divVector[1] = vector1[1]/scalar;

        return divVector;
    }
    public double dot(double [] vector1,double [] vector2){

        double dotProduct = (vector1[0]* vector2[0]) + (vector1[1]* vector2[1]);

        return dotProduct;
    }
    public void find_surface(KdTree.Node currParticle){
        double densityThreshold = 0.0039;

        if (currParticle.getDensity() < densityThreshold) {
            currParticle.setColor(Color.WHITE);
        }else {
            currParticle.setColor(Color.LIGHTSKYBLUE);
        }
    }
    public void calculateForces(KdTree.Node currParticle) {
        double[] velocity = {0,0};
        double[] pressureForce = {0,0};
        double[] viscousForce = {0,0};
        double[] currentVelocity = currParticle.getVelocity();
        ArrayList collisions = neighbors[currParticle.id];
        double [] pl = currParticle.getCoords_();
        for (int i = 0; i < collisions.size(); i++) {
            KdTree.Node neighbour = (KdTree.Node) collisions.get(i);
            double [] c = neighbour.getCoords_();
            double distance = getDistance(pl[0],pl[1],c[0],c[1]);
            double scalar = (neighbour.getPressure()+currParticle.getPressure() ) / (2* neighbour.getDensity()) * (Math.pow((smoothingLength - distance),2));
            double [] forceVectorPressure = div(sub(c,pl),distance);
            pressureForce = sub(velocity,
                    (mul(
                            mul(forceVectorPressure,scalar)
                            ,NORMALIZATION_PRESSURE_FORCE))
            );

            //adding viscous force
            forceVectorPressure = div(sub(neighbour.getVelocity(),currentVelocity),neighbour.getDensity());
            scalar = smoothingLength-distance;

            viscousForce = add(velocity,
                    (mul(
                            mul(forceVectorPressure,scalar)
                            ,NORMALIZATION_VISCOUS_FORCE))
            );

            //add gravity


            /*
            System.out.println("v: " + v[0]+", "+v[1]);
            System.out.println("rhat: " + rhat[0]+", "+rhat[1]);
            System.out.println("mu: " + mu);
            System.out.println("P: " + P);
            System.out.println("kernelValue: " + kernelValue);
            System.out.println("pressureVelocity: " + pressureVelocity[0]+", "+pressureVelocity[1]);
            System.out.println("addition to pressureVelocity: " + mul(rhat,(P*kernelValue))[0]+", "+mul(rhat,(P*kernelValue))[1]);
            System.out.println("-----------------------------------------------------");

             */


        }


        velocity = add(add(pressureForce,viscousForce),CONSTANT_FORCE);


        double [] velocityCalculated = add(currentVelocity, div(mul(velocity,timeStep),currParticle.getDensity()));
        currParticle.setVelocity(velocityCalculated);
        currParticle.setCoords_(add(pl,mul(currParticle.getVelocity(),timeStep)));

    }

    public void damBreak(KdTree.Node currparticle){
        double []coords = currparticle.getCoords_();
        double []velocity = currparticle.getVelocity();
        if (coords[0] >= MAX_X/2+smoothingLength){

            double [] newVelocity = {-velocity[0]*COR,velocity[1]};
            currparticle.setVelocity(newVelocity);
            currparticle.setCoords_(new double[] {MAX_X/2+smoothingLength, currparticle.getCoords_()[1]});
        }
    }

    // dodaj da se odbije od zida
    public void checkIfBounced(KdTree.Node currparticle){
        double []coords = currparticle.getCoords_();
        double []velocity = currparticle.getVelocity();
        if (coords[0] <= MIN_X){

            double [] newVelocity = {-velocity[0]*COR,velocity[1]};
            currparticle.setVelocity(newVelocity);
            currparticle.setCoords_(new double[] {0, currparticle.getCoords_()[1]});
        }
        if (coords[0] >= MAX_X){

            double [] newVelocity = {-velocity[0]*COR,velocity[1]};
            currparticle.setVelocity(newVelocity);
            currparticle.setCoords_(new double[] {MAX_X, currparticle.getCoords_()[1]});
        }
        if (coords[1] <= 0){
            //double [] newVelocity = {velocity[0],-velocity[1]};
            double [] newVelocity = {velocity[0],-velocity[1]*COR};
            currparticle.setVelocity(newVelocity);
            currparticle.setCoords_(new double[] { currparticle.getCoords_()[0],0});
        }
        if (coords[1] >= MAX_Y){

            double [] newVelocity = {velocity[0],-velocity[1]*COR};
            //double [] newVelocity = {velocity[0],-velocity[1]};
            currparticle.setVelocity(newVelocity);

            currparticle.setCoords_(new double[] { currparticle.getCoords_()[0],MAX_Y});
        }
    }

    public void updateParticles() {

        for (KdTree.Node p : particleCoordinates) {



            particles.get(p.id).setTranslateX(p.getCoords_()[0]);
            particles.get(p.id).setTranslateY(Math.abs(p.getCoords_()[1]-MAX_Y));
            particles.get(p.id).setColor(p.getColor());

        }
    }

    private void onUpdate(){

        for (KdTree.Node particleCoordinate : particleCoordinates) {
            neighbors[particleCoordinate.id] = (tree.rangeSearch(particleCoordinate,smoothingLength));
            //neighbors[particleCoordinate.id] = findCollisionsINFLUID(particleCoordinate);
        }



        for (int i = 0; i < particles.size(); i++) {
            if (simulateDamBreak){
                if (dam < 1000){

                    damBreak(particleCoordinates.get(i));
                }
            }


            checkIfBounced(particleCoordinates.get(i));
        }
        if (simulateDamBreak){
            dam+=1;
            System.out.println(dam);
        }

        for (int i = 0; i < particles.size(); i++) {
            KdTree.Node currParticle = particleCoordinates.get(i);
            calculateDensity(currParticle);
            if (currParticle.getDensity() == 0){
                currParticle.setDensity(0.0001);
            }
        }

        for (int i = 0; i < particles.size(); i++) {
            KdTree.Node currParticle = particleCoordinates.get(i);
            calculatePressure(currParticle);
        }

        for (int i = 0; i < particles.size(); i++) {
            KdTree.Node currParticle = particleCoordinates.get(i);
            calculateForces(currParticle);
        }

        for (int i = 0; i < particles.size(); i++) {
            KdTree.Node currParticle = particleCoordinates.get(i);
            find_surface(currParticle);
        }
        updateParticles();

    }

    public static void main(String[] args) {
        launch();
    }


    public double getDistance(double particleX,double particleY,double neighbourX,double neighbourY){
        double dx = particleX - neighbourX;
        double dy = particleY - neighbourY;
        double distance = Math.sqrt(dx * dx + dy * dy);

        if (distance <= 0){
            distance = 0.001;
        }
        return distance;
    }


}